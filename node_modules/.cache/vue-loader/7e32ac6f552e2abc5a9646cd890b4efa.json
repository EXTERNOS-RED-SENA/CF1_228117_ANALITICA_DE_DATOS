{"remainingRequest":"/home/runner/work/CF1_228117_ANALITICA_DE_DATOS/CF1_228117_ANALITICA_DE_DATOS/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/CF1_228117_ANALITICA_DE_DATOS/CF1_228117_ANALITICA_DE_DATOS/src/views/Tema3.vue?vue&type=template&id=d15d072a&lang=pug","dependencies":[{"path":"/home/runner/work/CF1_228117_ANALITICA_DE_DATOS/CF1_228117_ANALITICA_DE_DATOS/src/views/Tema3.vue","mtime":1732538787441},{"path":"/home/runner/work/CF1_228117_ANALITICA_DE_DATOS/CF1_228117_ANALITICA_DE_DATOS/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF1_228117_ANALITICA_DE_DATOS/CF1_228117_ANALITICA_DE_DATOS/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF1_228117_ANALITICA_DE_DATOS/CF1_228117_ANALITICA_DE_DATOS/node_modules/babel-loader/lib/index.js","mtime":456789000000},{"path":"/home/runner/work/CF1_228117_ANALITICA_DE_DATOS/CF1_228117_ANALITICA_DE_DATOS/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/CF1_228117_ANALITICA_DE_DATOS/CF1_228117_ANALITICA_DE_DATOS/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/CF1_228117_ANALITICA_DE_DATOS/CF1_228117_ANALITICA_DE_DATOS/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF1_228117_ANALITICA_DE_DATOS/CF1_228117_ANALITICA_DE_DATOS/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5jdXJzby1tYWluLWNvbnRhaW5lci5wYi0zCiAgQmFubmVySW50ZXJubwogIC5jb250YWluZXIudGFyamV0YS50YXJqZXRhLS1ibGFuY2EucC00LnAtbWQtNS5tYi01CiAgICAudGl0dWxvLXByaW5jaXBhbC5jb2xvci1hY2VudG8tY29udGVuaWRvCiAgICAgIC50aXR1bG8tcHJpbmNpcGFsX19udW1lcm8KICAgICAgICBzcGFuIDMKICAgICAgaDEgUHJvY2Vzb3MgZXN0YWTDrXN0aWNvcwogICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyCiAgICAgIC5jb2wtbGctNC5teS1sZy0wLm15LTMuajEKICAgICAgICBpbWcuaW1nLXQuaW1nLWEoc3JjPSdAL2Fzc2V0cy90ZW1wbGF0ZS9pbWFnZXMvdDMvMS5zdmcnKQogICAgICAuY29sLWxnLTUubXktbGctMC5teS0zCiAgICAgICAgLmJnMjgucC0zLmJyYWQuajEuaC0xMDAKICAgICAgICAgIHAubWItMAogICAgICAgICAgICB8ICBFbCBwcm9jZXNvIGVzdGFkw61zdGljbyBlcyB1biBjb25qdW50byBzaXN0ZW3DoXRpY28gZGUgcGFzb3MgcXVlIHNlIHNpZ3VlbiBwYXJhIHJlY29sZWN0YXIsIGFuYWxpemFyIHkgcHJlc2VudGFyIGRhdG9zIGNvbiBlbCBmaW4gZGUgb2J0ZW5lciBpbmZvcm1hY2nDs24gw7p0aWwgcGFyYSBsYSB0b21hIGRlIGRlY2lzaW9uZXMuIEVzdGUgcHJvY2VzbyBpbnZvbHVjcmEgdmFyaWFzIGZhc2VzIHF1ZSBnYXJhbnRpemFuIGxhIHZhbGlkZXogeSBwcmVjaXNpw7NuIGRlIGxvcyByZXN1bHRhZG9zIG9idGVuaWRvcy4gCiAgICAgIC5jb2wtbGctMy5teS1sZy0wLm15LTMuajEKICAgICAgICBpbWcuaW1nLXQuaW1nLWEoc3JjPSdAL2Fzc2V0cy90ZW1wbGF0ZS9pbWFnZXMvdDMvMi5wbmcnKQogICAgU2VwYXJhZG9yIAogICAgI3RfM18xLnRpdHVsby1zZWd1bmRvLmNvbG9yLWFjZW50by1ib3RvbmVzCiAgICAgIGgyIDMuMQlGYXNlcyBkZWwgcHJvY2VzbyBlc3RhZMOtc3RpY286IHJlY29sZWNjacOzbiwgYW7DoWxpc2lzIGUgaW50ZXJwcmV0YWNpw7NuCiAgICBwIEVsIHByb2Nlc28gZXN0YWTDrXN0aWNvIGdlbmVyYWxtZW50ZSBzZSBkaXZpZGUgZW4gdHJlcyBncmFuZGVzIGZhc2VzOgogICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLmFsaWduLWl0ZW1zLWNlbnRlci5tYi01CiAgICAgIC5jb2wtbGctOC5vcmRlci1sZy0xLm9yZGVyLTIKICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIuYWxpZ24taXRlbXMtY2VudGVyCiAgICAgICAgICAuY29sLWxnLTEyCiAgICAgICAgICAgIC50aXR1bG8ubWItNChkYXRhLWFvcz0iZmxpcC11cCIpCiAgICAgICAgICAgICAgaDUubWItMC5wLTEgUmVjb2xlY2Npw7NuIGRlIGRhdG9zCiAgICAgICAgICAgIHAgRXMgZWwgcHJpbWVyIHBhc28gZW4gY3VhbHF1aWVyIHByb2Nlc28gZXN0YWTDrXN0aWNvIHkgY29uc2lzdGUgZW4gb2J0ZW5lciBsYSBpbmZvcm1hY2nDs24gbmVjZXNhcmlhIHBhcmEgZWwgYW7DoWxpc2lzLiBMb3MgZGF0b3MgcHVlZGVuIHJlY29sZWN0YXJzZSBkZSBkaXZlcnNhcyBmdWVudGVzLCBjb21vIGVuY3Vlc3RhcywgZXhwZXJpbWVudG9zIG8gcmVnaXN0cm9zIGhpc3TDs3JpY29zLiBFc3RhIGZhc2UgZXMgY3LDrXRpY2EsIHlhIHF1ZSBsYSBjYWxpZGFkIHkgcHJlY2lzacOzbiBkZSBsb3MgZGF0b3MgcmVjb2xlY3RhZG9zIGltcGFjdGFuIGRpcmVjdGFtZW50ZSBlbiBsb3MgcmVzdWx0YWRvcyBmaW5hbGVzLgogICAgICAgICAgICBwIER1cmFudGUgZXN0YSBmYXNlLCBlcyBpbXBvcnRhbnRlIGRlZmluaXIgbGFzIHZhcmlhYmxlcyBxdWUgc2UgdmFuIGEgZXN0dWRpYXIsIGVsIHRpcG8gZGUgZGF0b3MgcXVlIHNlIG5lY2VzaXRhbiAoY3VhbnRpdGF0aXZvcyBvIGN1YWxpdGF0aXZvcyksIHkgZWwgbcOpdG9kbyBkZSByZWNvbGVjY2nDs24gKG9ic2VydmFjacOzbiwgZW5jdWVzdGFzLCBlbnRyZXZpc3RhcywgZXRjLikuIExhIHJlY29sZWNjacOzbiBwdWVkZSByZWFsaXphcnNlIG1lZGlhbnRlOgogICAgICAgICAgICAuYmcyOC5wLTQuYnJhZAogICAgICAgICAgICAgIHVsLmxpc3RhLXVsLS1jb2xvci5mYS11bAogICAgICAgICAgICAgICAgICBsaS5tYi0wCiAgICAgICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2sudjEKICAgICAgICAgICAgICAgICAgICBzcGFuCiAgICAgICAgICAgICAgICAgICAgICBiIE11ZXN0cmVvOgogICAgICAgICAgICAgICAgICAgICAgfCAgc2VsZWNjacOzbiBkZSB1bmEgbXVlc3RyYSByZXByZXNlbnRhdGl2YSBkZSBsYSBwb2JsYWNpw7NuLgogICAgICAgICAgICAgICAgICBsaS5tYi0wCiAgICAgICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2sudjEKICAgICAgICAgICAgICAgICAgICBzcGFuCiAgICAgICAgICAgICAgICAgICAgICBiIENlbnNvczoKICAgICAgICAgICAgICAgICAgICAgIHwgIHJlY29sZWNjacOzbiBkZSBkYXRvcyBkZSB0b2RhIGxhIHBvYmxhY2nDs24uCiAgICAgICAgICAgICAgICAgIGxpLm1iLTAKICAgICAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay52MQogICAgICAgICAgICAgICAgICAgIHNwYW4KICAgICAgICAgICAgICAgICAgICAgIGIgUmVnaXN0cm9zIGFkbWluaXN0cmF0aXZvczoKICAgICAgICAgICAgICAgICAgICAgIHwgIHVzbyBkZSBkYXRvcyB5YSBleGlzdGVudGVzIGNvbW8gbG9zIHJlZ2lzdHJvcyBtw6lkaWNvcywgcmVnaXN0cm9zIGZpbmFuY2llcm9zLCBldGMuCiAgICAgIC5jb2wtbGctNC5vcmRlci1sZy0yLm9yZGVyLTEKICAgICAgICBpbWcuaW1nLXQuaW1nLWEoc3JjPSdAL2Fzc2V0cy90ZW1wbGF0ZS9pbWFnZXMvdDMvMy5wbmcnKQogICAgCiAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIuYWxpZ24taXRlbXMtY2VudGVyLm1iLTUKICAgICAgLmNvbC1sZy00CiAgICAgICAgaW1nLmltZy10LmltZy1hKHNyYz0nQC9hc3NldHMvdGVtcGxhdGUvaW1hZ2VzL3QzLzQucG5nJykKICAgICAgLmNvbC1sZy04CiAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLmFsaWduLWl0ZW1zLWNlbnRlcgogICAgICAgICAgLmNvbC1sZy0xMgogICAgICAgICAgICAuYmdpLnAtNC5icmFkCiAgICAgICAgICAgICAgLnRpdHVsby5tYi00KGRhdGEtYW9zPSJmbGlwLXVwIikKICAgICAgICAgICAgICAgIGg1Lm1iLTAucC0xIEFuw6FsaXNpcyBkZSBkYXRvcwogICAgICAgICAgICAgIHAgVW5hIHZleiBxdWUgc2UgaGFuIHJlY29sZWN0YWRvIGxvcyBkYXRvcywgZWwgc2lndWllbnRlIHBhc28gZXMgb3JnYW5pemFybG9zIHkgYW5hbGl6YXJsb3MuIEVzdG8gaW1wbGljYSBvcmRlbmFyIGxvcyBkYXRvcywgY2xhc2lmaWNhcmxvcyB5IGFwbGljYXIgdMOpY25pY2FzIGVzdGFkw61zdGljYXMgYWRlY3VhZGFzLiBTZSBwdWVkZW4gdXRpbGl6YXIgbcOpdG9kb3MgZGUgYW7DoWxpc2lzIGRlc2NyaXB0aXZvLCBjb21vIGVsIGPDoWxjdWxvIGRlIG1lZGlkYXMgZGUgdGVuZGVuY2lhIGNlbnRyYWwgKG1lZGlhLCBtZWRpYW5hLCBtb2RhKSB5IGRlIGRpc3BlcnNpw7NuICh2YXJpYW56YSwgZGVzdmlhY2nDs24gZXN0w6FuZGFyKSwgbyBtw6l0b2RvcyBpbmZlcmVuY2lhbGVzIHF1ZSBwZXJtaXRlbiBoYWNlciBnZW5lcmFsaXphY2lvbmVzIHNvYnJlIGxhIHBvYmxhY2nDs24uCiAgICAgICAgICAgICAgcCBFbiBlc3RhIGZhc2UsIHNlIGJ1c2NhIGlkZW50aWZpY2FyIHBhdHJvbmVzLCB0ZW5kZW5jaWFzIG8gcmVsYWNpb25lcyBlbnRyZSBsYXMgdmFyaWFibGVzLiBMYXMgdMOpY25pY2FzIGVzdGFkw61zdGljYXMgZW1wbGVhZGFzIGRlcGVuZGVuIGRlbCB0aXBvIGRlIGRhdG9zIHkgZGUgbG9zIG9iamV0aXZvcyBkZWwgZXN0dWRpby4gUG9yIGVqZW1wbG8sIGxvcyBncsOhZmljb3MgY29tbyBsb3MgaGlzdG9ncmFtYXMgbyBsb3MgZGlhZ3JhbWFzIGRlIGRpc3BlcnNpw7NuIGF5dWRhbiBhIHZpc3VhbGl6YXIgbG9zIGRhdG9zLCBtaWVudHJhcyBxdWUgbG9zIG1vZGVsb3MgZXN0YWTDrXN0aWNvcyBwZXJtaXRlbiBoYWNlciBwcmVkaWNjaW9uZXMuCgogICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLmFsaWduLWl0ZW1zLWNlbnRlcgogICAgICAuY29sLWxnLTEyCiAgICAgICAgLnRpdHVsby5tYi00KGRhdGEtYW9zPSJmbGlwLXVwIikKICAgICAgICAgIGg1Lm1iLTAucC0xIEludGVycHJldGFjacOzbiBkZSByZXN1bHRhZG9zCiAgICAgICAgcCBGaW5hbG1lbnRlLCB1bmEgdmV6IHF1ZSBzZSBoYW4gYW5hbGl6YWRvIGxvcyBkYXRvcywgZXMgbmVjZXNhcmlvIGludGVycHJldGFyIGxvcyByZXN1bHRhZG9zIG9idGVuaWRvcy4gRXN0YSBmYXNlIGNvbnNpc3RlIGVuIGRhcmxlIHNlbnRpZG8gYSBsb3MgcmVzdWx0YWRvcyB5IHJlc3BvbmRlciBsYXMgcHJlZ3VudGFzIGRlIGludmVzdGlnYWNpw7NuIG8gbG9zIG9iamV0aXZvcyBwbGFudGVhZG9zIGFsIGluaWNpbyBkZWwgZXN0dWRpby4gU2UgdXRpbGl6YW4gY29uY2x1c2lvbmVzIGJhc2FkYXMgZW4gbG9zIHJlc3VsdGFkb3MgZXN0YWTDrXN0aWNvcyBwYXJhIHRvbWFyIGRlY2lzaW9uZXMgaW5mb3JtYWRhcyBvIGZvcm11bGFyIG51ZXZhcyBoaXDDs3Rlc2lzLiBMYSBpbnRlcnByZXRhY2nDs24gZGViZSByZWFsaXphcnNlIGNvbiBjdWlkYWRvLCB0ZW5pZW5kbyBlbiBjdWVudGEgcG9zaWJsZXMgc2VzZ29zIGVuIGxvcyBkYXRvcyB5IGxpbWl0YWNpb25lcyBkZWwgZXN0dWRpby4gQWRlbcOhcywgZXMgaW1wb3J0YW50ZSBxdWUgbG9zIHJlc3VsdGFkb3Mgc2UgY29tdW5pcXVlbiBkZSBtYW5lcmEgY2xhcmEsIGdlbmVyYWxtZW50ZSBhIHRyYXbDqXMgZGUgaW5mb3JtZXMgbyBwcmVzZW50YWNpb25lcyBxdWUgaW5jbHV5YW4gZ3LDoWZpY29zIHkgdGFibGFzIHBhcmEgZmFjaWxpdGFyIGxhIGNvbXByZW5zacOzbi4KICAgIAogICAgLnRpdHVsby1zZXh0by5jb2xvci1hY2VudG8tY29udGVuaWRvLm9mZnNldC0yKGRhdGEtYW9zPSJ6b29tLWluIikKICAgICAgaDUgRmlndXJhIDEuCiAgICAgIHNwYW4gIEZhc2VzIGRlbCBwcm9jZXNvIGVzdGFkw61zdGljbwogICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLmFsaWduLWl0ZW1zLWNlbnRlci5tYi01CiAgICAgIC5jb2wtbGctOAogICAgICAgIGZpZ3VyZQogICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvdGVtcGxhdGUvaW1hZ2VzL3QzLzUuc3ZnJywgYWx0PSdMYSBGaWd1cmEgMSBzZSBkZW5vbWluYSDCq0Zhc2VzIGRlbCBwcm9jZXNvIGVzdGFkw61zdGljb8K7IHkgc2ludGV0aXphIGxhcyBmYXNlcyBkZWwgcHJvY2VzbyBlc3RhZMOtc3RpY286IHJlY29sZWNjacOzbiBkZSBkYXRvcywgYW7DoWxpc2lzIGRlIGRhdG9zIGUgaW50ZXJwcmV0YWNpw7NuIGRlIHJlc3VsdGFkb3MsIHkgbG9zIHByaW5jaXBhbGVzIGVsZW1lbnRvcyBkZSBjYWRhIHVuYSBkZSBlbGxhcy4nKQogICAgCiAgICBwIExhIHJlY29sZWNjacOzbiBkZSBkYXRvcyBlcyBlc2VuY2lhbCBlbiBlbCBwcm9jZXNvIGVzdGFkw61zdGljbywgeWEgcXVlIGxvcyBkYXRvcyBjb25zdGl0dXllbiBsYSBiYXNlIGRlIGN1YWxxdWllciBhbsOhbGlzaXMuIEV4aXN0ZW4gdmFyaW9zIG3DqXRvZG9zIHBhcmEgcmVjb2xlY3RhciBkYXRvcywgeSBsYSBlbGVjY2nDs24gZGUgdW4gbcOpdG9kbyBkZXBlbmRlcsOhIGRlbCB0aXBvIGRlIGluZm9ybWFjacOzbiBxdWUgc2UgbmVjZXNpdGEgeSBkZSBsb3MgcmVjdXJzb3MgZGlzcG9uaWJsZXMuCgogICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLmFsaWduLWl0ZW1zLWNlbnRlci5tYi01CiAgICAgIC5jb2wtbGctNAogICAgICAgIGltZy5pbWctdC5pbWctYShzcmM9J0AvYXNzZXRzL3RlbXBsYXRlL2ltYWdlcy90My82LnBuZycpCiAgICAgIC5jb2wtbGctOAogICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1jZW50ZXIKICAgICAgICAgIC5jb2wtbGctMTIKICAgICAgICAgICAgLnRpdHVsby5tYi00KGRhdGEtYW9zPSJmbGlwLXVwIikKICAgICAgICAgICAgICBoNS5tYi0wLnAtMSBFbmN1ZXN0YXMKICAgICAgICAgICAgcCBMYXMgZW5jdWVzdGFzIHNvbiB1bm8gZGUgbG9zIG3DqXRvZG9zIG3DoXMgY29tdW5lcyBwYXJhIHJlY29sZWN0YXIgZGF0b3MuIENvbnNpc3RlbiBlbiBmb3JtdWxhciB1bmEgc2VyaWUgZGUgcHJlZ3VudGFzIGVzdGFuZGFyaXphZGFzIGEgdW4gZ3J1cG8gZGUgcGVyc29uYXMgKGxhIG11ZXN0cmEpIGNvbiBlbCBmaW4gZGUgb2J0ZW5lciBpbmZvcm1hY2nDs24gY3VhbnRpdGF0aXZhIG8gY3VhbGl0YXRpdmEuIExhcyBlbmN1ZXN0YXMgcHVlZGVuIHNlciBwcmVzZW5jaWFsZXMsIHRlbGVmw7NuaWNhcyBvIGVuIGzDrW5lYS4gVW5hIGRlIHN1cyB2ZW50YWphcyBlcyBxdWUgcGVybWl0ZW4gb2J0ZW5lciBkYXRvcyBkZSB1bmEgZ3JhbiBjYW50aWRhZCBkZSBwZXJzb25hcyBlbiB1biBwZXJpb2RvIGNvcnRvIGRlIHRpZW1wby4KICAgICAgICAgICAgcCBUaXBvcyBkZSBlbmN1ZXN0YXM6CiAgICAgICAgICAgIC5iZ2kucC0xLmJyYWQubWItNAogICAgICAgICAgICAgIHVsLmxpc3RhLXVsLS1jb2xvci5mYS11bAogICAgICAgICAgICAgICAgICBsaS5tYi0wCiAgICAgICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2sudjEKICAgICAgICAgICAgICAgICAgICBzcGFuCiAgICAgICAgICAgICAgICAgICAgICBiIEVuY3Vlc3RhcyBlc3RydWN0dXJhZGFzOgogICAgICAgICAgICAgICAgICAgICAgfCAgdGllbmVuIHByZWd1bnRhcyBjZXJyYWRhcyBjb24gcmVzcHVlc3RhcyBwcmVkZWZpbmlkYXMuCiAgICAgICAgICAgICAgICAgIGxpLm1iLTAKICAgICAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay52MQogICAgICAgICAgICAgICAgICAgIHNwYW4KICAgICAgICAgICAgICAgICAgICAgIGIgRW5jdWVzdGFzIHNlbWllc3RydWN0dXJhZGFzOgogICAgICAgICAgICAgICAgICAgICAgfCAgY29tYmluYW4gcHJlZ3VudGFzIGNlcnJhZGFzIHkgYWJpZXJ0YXMsIG9mcmVjaWVuZG8gbWF5b3IgZmxleGliaWxpZGFkLgogICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1jZW50ZXIKICAgICAgICAgIC5jb2wtbGctMTIKICAgICAgICAgICAgLnRpdHVsby5tYi00KGRhdGEtYW9zPSJmbGlwLXVwIikKICAgICAgICAgICAgICBoNS5tYi0wLnAtMSBPYnNlcnZhY2nDs24KICAgICAgICAgICAgcCBFc3RlIG3DqXRvZG8gaW1wbGljYSBsYSByZWNvbGVjY2nDs24gZGUgZGF0b3MgYSB0cmF2w6lzIGRlIGxhIG9ic2VydmFjacOzbiBkaXJlY3RhIGRlIGNvbXBvcnRhbWllbnRvcywgZXZlbnRvcyBvIGZlbsOzbWVub3MuIExhIG9ic2VydmFjacOzbiBwdWVkZSBzZXIgcGFydGljaXBhbnRlIChlbCBpbnZlc3RpZ2Fkb3IgZm9ybWEgcGFydGUgZGVsIGVudG9ybm8gcXVlIGVzdMOhIG9ic2VydmFuZG8pIG8gbm8gcGFydGljaXBhbnRlIChlbCBpbnZlc3RpZ2Fkb3Igb2JzZXJ2YSBkZXNkZSBmdWVyYSBzaW4gaW50ZXJhY3R1YXIgY29uIGVsIGVudG9ybm8pLiBFcyB1biBtw6l0b2RvIMO6dGlsIGN1YW5kbyBzZSBuZWNlc2l0YSBlc3R1ZGlhciBmZW7Ds21lbm9zIGVuIHN1IGNvbnRleHRvIG5hdHVyYWwuCiAgICAgICAgICAgIHAgRWplbXBsbzogRW4gZXN0dWRpb3MgZGUgY29tcG9ydGFtaWVudG8gYW5pbWFsLCBsb3MgaW52ZXN0aWdhZG9yZXMgcHVlZGVuIG9ic2VydmFyIGVsIGNvbXBvcnRhbWllbnRvIGRlIHVuYSBwb2JsYWNpw7NuIGRlIGFuaW1hbGVzIGVuIHN1IGjDoWJpdGF0IG5hdHVyYWwuCiAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIuYWxpZ24taXRlbXMtY2VudGVyLm1iLTUKICAgICAgLmNvbC1sZy0xMAogICAgICAgIC5iZzI4LnAtNC5icmFkCiAgICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIuYWxpZ24taXRlbXMtY2VudGVyCiAgICAgICAgICAgIC5jb2wtbGctMgogICAgICAgICAgICAgIGltZy5pbWctdC5pbWctYShzcmM9J0AvYXNzZXRzL3RlbXBsYXRlL2ltYWdlcy90My83LnN2ZycpCiAgICAgICAgICAgIC5jb2wtbGctMTAKICAgICAgICAgICAgICAudGl0dWxvLm1iLTQoZGF0YS1hb3M9ImZsaXAtdXAiKQogICAgICAgICAgICAgICAgaDUubWItMC5wLTEgRXhwZXJpbWVudGFjacOzbgogICAgICAgICAgICAgIHAgRW4gdW4gZXhwZXJpbWVudG8sIGVsIGludmVzdGlnYWRvciBtYW5pcHVsYSB1bmEgbyBtw6FzIHZhcmlhYmxlcyBpbmRlcGVuZGllbnRlcyBwYXJhIG9ic2VydmFyIGVsIGVmZWN0byBzb2JyZSB1bmEgdmFyaWFibGUgZGVwZW5kaWVudGUuIEVzdGUgbcOpdG9kbyBwZXJtaXRlIGVzdGFibGVjZXIgcmVsYWNpb25lcyBkZSBjYXVzYSB5IGVmZWN0by4gTG9zIGV4cGVyaW1lbnRvcyBzdWVsZW4gcmVhbGl6YXJzZSBlbiBlbnRvcm5vcyBjb250cm9sYWRvcywgY29tbyBsYWJvcmF0b3Jpb3MsIHBhcmEgbWluaW1pemFyIGxhIGluZmx1ZW5jaWEgZGUgdmFyaWFibGVzIGV4dGVybmFzLgogICAgICAgICAgICAgIFAgRWplbXBsbzogRW4gdW4gZXN0dWRpbyBkZSB1biBudWV2byBtZWRpY2FtZW50bywgbG9zIGludmVzdGlnYWRvcmVzIHBvZHLDrWFuIGRhciBlbCBtZWRpY2FtZW50byBhIHVuIGdydXBvIGRlIHBhY2llbnRlcyB5IHVuIHBsYWNlYm8gYSBvdHJvIGdydXBvLCBvYnNlcnZhbmRvIGxhcyBkaWZlcmVuY2lhcyBlbiBsb3MgcmVzdWx0YWRvcyBkZSBzYWx1ZCBlbnRyZSBhbWJvcyBncnVwb3MuCiAgICBTZXBhcmFkb3IgCiAgICAjdF8zXzIudGl0dWxvLXNlZ3VuZG8uY29sb3ItYWNlbnRvLWJvdG9uZXMKICAgICAgaDIgMy4yCURlZmluaWNpw7NuIHkgb2JqZXRpdm9zIGRlIGNhZGEgZmFzZSBkZWwgcHJvY2VzbyBlc3RhZMOtc3RpY28KICAgIAogICAgcCBDYWRhIGZhc2UgZGVsIHByb2Nlc28gZXN0YWTDrXN0aWNvIHRpZW5lIG9iamV0aXZvcyBjbGFyb3MgcXVlIGNvbnRyaWJ1eWVuIGEgbGEgaW50ZWdyaWRhZCBkZWwgYW7DoWxpc2lzIHkgYSBsYSB2YWxpZGV6IGRlIGxvcyByZXN1bHRhZG9zOgogICAgCiAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIubWItNCAKICAgICAgLmNvbC1sZy04Lm15LTMub3JkZXItbGctMS5vcmRlci0yCiAgICAgICAgQWNvcmRpb25BKHRpcG89ImEiIGNsYXNlLXRhcmpldGE9InRhcmpldGEgdGFyamV0YS0tYXp1bCIpCiAgICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIodGl0dWxvPSJSZWNvbGVjY2nDs24gZGUgZGF0b3MiKQogICAgICAgICAgICAuY29sLWxnLTEyLm15LTMKICAgICAgICAgICAgICBwIEVsIG9iamV0aXZvIGRlIGVzdGEgZmFzZSBlcyBvYnRlbmVyIGRhdG9zIHByZWNpc29zIHkgY29uZmlhYmxlcyBxdWUgcmVzcG9uZGFuIGEgbGFzIHByZWd1bnRhcyBkZSBpbnZlc3RpZ2FjacOzbi4gTGEgcmVjb2xlY2Npw7NuIGFkZWN1YWRhIGRlIGRhdG9zIG1pbmltaXphIGVycm9yZXMgeSBzZXNnb3MsIGxvIHF1ZSBhc2VndXJhIGxhIGNhbGlkYWQgZGVsIGFuw6FsaXNpcyBwb3N0ZXJpb3IuCiAgICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIodGl0dWxvPSJBbsOhbGlzaXMgZGUgZGF0b3MiKQogICAgICAgICAgICAuY29sLWxnLTEyLm15LTMKICAgICAgICAgICAgICBwIEVsIG9iamV0aXZvIGRlIGVzdGEgZmFzZSBlcyBpZGVudGlmaWNhciBwYXRyb25lcywgdGVuZGVuY2lhcyB5IHJlbGFjaW9uZXMgZW50cmUgbGFzIHZhcmlhYmxlcy4gQSB0cmF2w6lzIGRlbCBhbsOhbGlzaXMgZXN0YWTDrXN0aWNvLCBzZSBleHRyYWUgaW5mb3JtYWNpw7NuIHNpZ25pZmljYXRpdmEgcXVlIGF5dWRhcsOhIGEgaW50ZXJwcmV0YXIgZWwgZmVuw7NtZW5vIGVuIGVzdHVkaW8uIEFkZW3DoXMsIGVsIGFuw6FsaXNpcyBwZXJtaXRlIHJlYWxpemFyIGNvbXBhcmFjaW9uZXMgeSBwcmVkaWNjaW9uZXMuCiAgICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIodGl0dWxvPSJJbnRlcnByZXRhY2nDs24gZGUgcmVzdWx0YWRvcyIpCiAgICAgICAgICAgIC5jb2wtbGctMTIubXktMwogICAgICAgICAgICAgIHAgRWwgb2JqZXRpdm8gYXF1w60gZXMgcHJvcG9yY2lvbmFyIHVuYSBleHBsaWNhY2nDs24gY2xhcmEgeSBwcmVjaXNhIGRlIGxvcyBoYWxsYXpnb3MgZGVsIGFuw6FsaXNpcyBkZSBkYXRvcy4gTGEgaW50ZXJwcmV0YWNpw7NuIGNvcnJlY3RhIGRlIGxvcyByZXN1bHRhZG9zIGVzIGZ1bmRhbWVudGFsIHBhcmEgcXVlIGxhcyBjb25jbHVzaW9uZXMgZGVsIGVzdHVkaW8gc2VhbiDDunRpbGVzIHkgcmVsZXZhbnRlcyBwYXJhIGxhIHRvbWEgZGUgZGVjaXNpb25lcy4KICAgICAgICAgIAogICAgICAuY29sLWxnLTQubXktMy5vcmRlci1sZy0yLm9yZGVyLTEKICAgICAgICBpbWcuaW1nLWEuaW1nLXQoc3JjPSdAL2Fzc2V0cy90ZW1wbGF0ZS9pbWFnZXMvdDMvOC5wbmcnLCBhbHQ9JycpIAogICAgU2VwYXJhZG9yIAogICAgI3RfM18zLnRpdHVsby1zZWd1bmRvLmNvbG9yLWFjZW50by1ib3RvbmVzCiAgICAgIGgyIDMuMyAgSW1wb3J0YW5jaWEgZGUgbGEgY29ycmVjdGEgcmVjb2xlY2Npw7NuIGRlIGRhdG9zIHBhcmEgZXZpdGFyIHNlc2dvcwogICAgcCBMYSBjb3JyZWN0YSByZWNvbGVjY2nDs24gZGUgZGF0b3MgZXMgZXNlbmNpYWwgcGFyYSBldml0YXIgZXJyb3JlcyB5IHNlc2dvcyBxdWUgcG9kcsOtYW4gY29tcHJvbWV0ZXIgbGEgdmFsaWRleiBkZSBsb3MgcmVzdWx0YWRvcy4gQWxndW5vcyB0aXBvcyBkZSBzZXNnb3MgcXVlIHB1ZWRlbiBvY3VycmlyIGR1cmFudGUgbGEgcmVjb2xlY2Npw7NuIGRlIGRhdG9zIHNvbjoKICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5tYi00IAogICAgICAuY29sLWxnLTQubXktMwogICAgICAgIGltZy5pbWctYS5pbWctdChzcmM9J0AvYXNzZXRzL3RlbXBsYXRlL2ltYWdlcy90My85LnN2ZycsIGFsdD0nJykgICAgICAgCiAgICAgIC5jb2wtbGctOC5teS0zCiAgICAgICAgQWNvcmRpb25BKHRpcG89ImEiIGNsYXNlLXRhcmpldGE9InRhcmpldGEgdGFyamV0YS0tYXp1bCIpCiAgICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIodGl0dWxvPSJTZXNnbyBkZSBzZWxlY2Npw7NuIikKICAgICAgICAgICAgLmNvbC1sZy0xMi5teS0zCiAgICAgICAgICAgICAgcCBPY3VycmUgY3VhbmRvIGxhIG11ZXN0cmEgbm8gZXMgcmVwcmVzZW50YXRpdmEgZGUgbGEgcG9ibGFjacOzbi4gUG9yIGVqZW1wbG8sIHNpIHNlIGVzdHVkaWEgdW5hIG11ZXN0cmEgZGUgZXN0dWRpYW50ZXMgdW5pdmVyc2l0YXJpb3MgcGFyYSBoYWNlciBpbmZlcmVuY2lhcyBzb2JyZSB0b2RhIGxhIHBvYmxhY2nDs24gYWR1bHRhLCBzZSBpbmN1cnJpcsOtYSBlbiB1biBzZXNnbyBkZSBzZWxlY2Npw7NuLgogICAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyKHRpdHVsbz0iU2VzZ28gZGUgcmVzcHVlc3RhIikKICAgICAgICAgICAgLmNvbC1sZy0xMi5teS0zCiAgICAgICAgICAgICAgcCBTdWNlZGUgY3VhbmRvIGxhcyByZXNwdWVzdGFzIGRlIGxvcyBwYXJ0aWNpcGFudGVzIHNvbiBpbmZsdWVuY2lhZGFzIHBvciBsYSBmb3JtYSBlbiBxdWUgc2UgZm9ybXVsYW4gbGFzIHByZWd1bnRhcyBvIHBvciBlbCBlbnRvcm5vIGVuIGVsIHF1ZSBzZSByZWFsaXphIGxhIGVuY3Vlc3RhLiBFc3RvIHB1ZWRlIG9jdXJyaXIsIHBvciBlamVtcGxvLCBzaSBsYXMgcHJlZ3VudGFzIGVzdMOhbiByZWRhY3RhZGFzIGRlIG1hbmVyYSBxdWUgc3VnaWVyZW4gdW5hIHJlc3B1ZXN0YSBwYXJ0aWN1bGFyLgogICAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyKHRpdHVsbz0iU2VzZ28gZGUgbm8gcmVzcHVlc3RhIikKICAgICAgICAgICAgLmNvbC1sZy0xMi5teS0zCiAgICAgICAgICAgICAgcCBPY3VycmUgY3VhbmRvIHVuYSBwYXJ0ZSBkZSBsYSBtdWVzdHJhIHNlbGVjY2lvbmFkYSBubyBwYXJ0aWNpcGEgZW4gZWwgZXN0dWRpbywgbG8gcXVlIHB1ZWRlIGFmZWN0YXIgbGEgcmVwcmVzZW50YXRpdmlkYWQgZGUgbG9zIGRhdG9zIHJlY29sZWN0YWRvcy4KICAgICAgICAgIAogICAgU2VwYXJhZG9yIAogICAgI3RfM180LnRpdHVsby1zZWd1bmRvLmNvbG9yLWFjZW50by1ib3RvbmVzCiAgICAgIGgyIDMuNAlDb250cm9sIGRlIGNhbGlkYWQgZW4gbGEgcmVjb2xlY2Npw7NuIGRlIGRhdG9zIGVzdGFkw61zdGljb3MKICAgIHAgRWwgY29udHJvbCBkZSBjYWxpZGFkIGVuIGxhIHJlY29sZWNjacOzbiBkZSBkYXRvcyBlcyB1bmEgZXRhcGEgY3LDrXRpY2EgcGFyYSBnYXJhbnRpemFyIHF1ZSBsb3MgZGF0b3Mgb2J0ZW5pZG9zIHNlYW4gcHJlY2lzb3MsIGNvbXBsZXRvcyB5IGNvbmZpYWJsZXMuIEFsZ3VuYXMgcHLDoWN0aWNhcyBjb211bmVzIHBhcmEgYXNlZ3VyYXIgbGEgY2FsaWRhZCBkZSBsb3MgZGF0b3MgaW5jbHV5ZW46CiAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIubWItNCAKICAgICAgLmNvbC1sZy0xMi5teS0zCiAgICAgICAgQWNvcmRpb25BKHRpcG89ImEiIGNsYXNlLXRhcmpldGE9InRhcmpldGEgdGFyamV0YS0tYXp1bCIpCiAgICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIodGl0dWxvPSJDYXBhY2l0YWNpw7NuIGRlbCBwZXJzb25hbCIpCiAgICAgICAgICAgIC5jb2wtbGctMTIubXktMwogICAgICAgICAgICAgIHAgRXMgaW1wb3J0YW50ZSBxdWUgbGFzIHBlcnNvbmFzIGVuY2FyZ2FkYXMgZGUgcmVjb2xlY3RhciBsb3MgZGF0b3MgZXN0w6luIGNhcGFjaXRhZGFzIGVuIGxvcyBtw6l0b2RvcyB5IGhlcnJhbWllbnRhcyBxdWUgdmFuIGEgdXRpbGl6YXIuIEVzdG8gYXNlZ3VyYSBxdWUgbGEgcmVjb2xlY2Npw7NuIHNlYSBjb25zaXN0ZW50ZSB5IGxpYnJlIGRlIGVycm9yZXMuCiAgICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIodGl0dWxvPSJTdXBlcnZpc2nDs24geSBtb25pdG9yZW8iKQogICAgICAgICAgICAuY29sLWxnLTEyLm15LTMKICAgICAgICAgICAgICBwIER1cmFudGUgbGEgcmVjb2xlY2Npw7NuIGRlIGRhdG9zLCBlcyBlc2VuY2lhbCBzdXBlcnZpc2FyIGVsIHByb2Nlc28gcGFyYSBpZGVudGlmaWNhciB5IGNvcnJlZ2lyIGVycm9yZXMgZW4gdGllbXBvIHJlYWwuIEVsIG1vbml0b3JlbyBjb25zdGFudGUgZ2FyYW50aXphIHF1ZSBzZSBzaWdhbiBsb3MgcHJvY2VkaW1pZW50b3MgZXN0YWJsZWNpZG9zLgogICAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyKHRpdHVsbz0iUHJ1ZWJhcyBwaWxvdG8iKQogICAgICAgICAgICAuY29sLWxnLTEyLm15LTMKICAgICAgICAgICAgICBwIEFudGVzIGRlIHJlYWxpemFyIHVuIGVzdHVkaW8gY29tcGxldG8sIHNlIHB1ZWRlIGhhY2VyIHVuYSBwcnVlYmEgcGlsb3RvIGNvbiB1biBwZXF1ZcOxbyBncnVwbyBwYXJhIGRldGVjdGFyIHBvc2libGVzIHByb2JsZW1hcyBlbiBsb3MgY3Vlc3Rpb25hcmlvcywgaGVycmFtaWVudGFzIG8gcHJvY2VkaW1pZW50b3MuCiAgICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIodGl0dWxvPSJSZXZpc2nDs24gZGUgZGF0b3MiKQogICAgICAgICAgICAuY29sLWxnLTEyLm15LTMKICAgICAgICAgICAgICBwIERlc3B1w6lzIGRlIGxhIHJlY29sZWNjacOzbiwgZXMgaW1wb3J0YW50ZSByZXZpc2FyIGxvcyBkYXRvcyBwYXJhIGlkZW50aWZpY2FyIHZhbG9yZXMgYXTDrXBpY29zIG8gaW5jb25zaXN0ZW5jaWFzIHF1ZSBwb2Ryw61hbiBpbmRpY2FyIGVycm9yZXMgZW4gbGEgcmVjb2xlY2Npw7NuLgogICAgICAgICAgICAgIHAgCiAgICAgICAgICAgICAgICBiIEVqZW1wbG86CiAgICAgICAgICAgICAgICB8IHByb2Nlc28gZXN0YWTDrXN0aWNvIHBhcmEgdW5hIGVuY3Vlc3RhIGRlIHNhdGlzZmFjY2nDs24uCiAgICAgICAgICAgICAgcCBVbmEgZW1wcmVzYSByZWFsaXphIHVuYSBlbmN1ZXN0YSBkZSBzYXRpc2ZhY2Npw7NuIGEgc3VzIGNsaWVudGVzIHkgb2J0aWVuZSBsb3Mgc2lndWllbnRlcyByZXN1bHRhZG9zIHNvYnJlIHVuYSBlc2NhbGEgZGUgMSBhIDEwIChkb25kZSAxIGVzIG11eSBpbnNhdGlzZmVjaG8geSAxMCBlcyBtdXkgc2F0aXNmZWNobyk6CiAgICAgICAgICAgICAgcCBSZXNwdWVzdGEgPSB7IDcsIDgsIDYsIDksIDcsIDgsIDUsIDcsIDYsIDkgfQogICAgICAgICAgICAgIHAKICAgICAgICAgICAgICAgIGIgRmFzZSBkZSByZWNvbGVjY2nDs24gZGUgZGF0b3M6CiAgICAgICAgICAgICAgICB8IHNlIHJlY29sZWN0YSBsYXMgcmVzcHVlc3RhcyBkZSBsb3MgY2xpZW50ZXMgbWVkaWFudGUgdW4gZm9ybXVsYXJpbyBlbiBsw61uZWEuCiAgICAgICAgICAgICAgcCBGYXNlIGRlIGFuw6FsaXNpcwogICAgICAgICAgICAgIC50YXJqZXRhLnRleHQtY2VudGVyCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJlcS1jIj4KICAgICAgICAgICAgICAgICAgPHNwYW4+IE1lZGlhOiB4ID0gPC9zcGFuPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZnJhY3Rpb24iPgogICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImZ1cCI+NyArIDggKzYgKyA5ICsgNyArIDggKyA1ICsgNyArIDYgKyA5PC9zcGFuPgogICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iYmFyIj4vPC9zcGFuPgogICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZmRuIj4xMDwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPHNwYW4+ID0gNy4yPC9zcGFuPgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIAogICAgICAgICAgICAgIHAgRGVzdmlhY2nDs24gZXN0w6FuZGFyOiBvID0gMS4zNQogICAgICAgICAgICAgIHAKICAgICAgICAgICAgICAgIGIgRmFzZSBkZSBpbnRlcnByZXRhY2nDs246CiAgICAgICAgICAgICAgICB8IExhIG1lZGlkYSBkZSBzYXRpc2ZhY2Npw7NuIGVzIGRlIDcuMiwgbG8gcXVlIGluZGljYSBxdWUsIGVuIGdlbmVyYWwsIGxvcyBjbGllbnRlcyBlc3TDoW4gc2F0aXNmZWNob3MuIFNpbiBlbWJhcmdvLCBsYSBkZXN2aWFjacOzbiBlc3TDoW5kYXIgbXVlc3RyYSBjaWVydGEgdmFyaWFiaWxpZGFkIGVuIGxhcyByZXNwdWVzdGFzLCBwb3IgbG8gcXVlIGFsZ3Vub3MgY2xpZW50ZXMgZXN0w6FuIG1lbm9zIHNhdGlzZmVjaG9zLgoK"},null]}