{"remainingRequest":"/home/runner/work/CF1_228117_ANALITICA_DE_DATOS/CF1_228117_ANALITICA_DE_DATOS/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/CF1_228117_ANALITICA_DE_DATOS/CF1_228117_ANALITICA_DE_DATOS/src/views/Tema7.vue?vue&type=template&id=735b10eb&lang=pug","dependencies":[{"path":"/home/runner/work/CF1_228117_ANALITICA_DE_DATOS/CF1_228117_ANALITICA_DE_DATOS/src/views/Tema7.vue","mtime":1732538787441},{"path":"/home/runner/work/CF1_228117_ANALITICA_DE_DATOS/CF1_228117_ANALITICA_DE_DATOS/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF1_228117_ANALITICA_DE_DATOS/CF1_228117_ANALITICA_DE_DATOS/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF1_228117_ANALITICA_DE_DATOS/CF1_228117_ANALITICA_DE_DATOS/node_modules/babel-loader/lib/index.js","mtime":456789000000},{"path":"/home/runner/work/CF1_228117_ANALITICA_DE_DATOS/CF1_228117_ANALITICA_DE_DATOS/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/CF1_228117_ANALITICA_DE_DATOS/CF1_228117_ANALITICA_DE_DATOS/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/CF1_228117_ANALITICA_DE_DATOS/CF1_228117_ANALITICA_DE_DATOS/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF1_228117_ANALITICA_DE_DATOS/CF1_228117_ANALITICA_DE_DATOS/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5jdXJzby1tYWluLWNvbnRhaW5lci5wYi0zCiAgQmFubmVySW50ZXJubwogIC5jb250YWluZXIudGFyamV0YS50YXJqZXRhLS1ibGFuY2EucC00LnAtbWQtNS5tYi01CiAgICAudGl0dWxvLXByaW5jaXBhbC5jb2xvci1hY2VudG8tY29udGVuaWRvCiAgICAgIC50aXR1bG8tcHJpbmNpcGFsX19udW1lcm8KICAgICAgICBzcGFuIDcKICAgICAgaDEgRnVlbnRlcyBkZSBkYXRvcwogICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyCiAgICAgIC5jb2wtbGctNC5teS1sZy0wLm15LTMuajEKICAgICAgICBpbWcuaW1nLXQuaW1nLWEoc3JjPSdAL2Fzc2V0cy90ZW1wbGF0ZS9pbWFnZXMvdDcvMS5wbmcnKQogICAgICAuY29sLWxnLTUubXktbGctMC5teS0zCiAgICAgICAgLmJnMjgucC0zLmJyYWQuajEuaC0xMDAKICAgICAgICAgIHAubWItMAogICAgICAgICAgICB8ICBMYXMgZnVlbnRlcyBkZSBkYXRvcyBzb24gbG9zIG9yw61nZW5lcyBkZXNkZSBsb3MgY3VhbGVzIHNlIG9idGllbmVuIGxvcyBkYXRvcyBuZWNlc2FyaW9zIHBhcmEgcmVhbGl6YXIgYW7DoWxpc2lzIGVzdGFkw61zdGljb3MuIFNlIHJlcXVpZXJlIGlkZW50aWZpY2FyIGNvcnJlY3RhbWVudGUgbGFzIGZ1ZW50ZXMgZGUgZGF0b3MgYWRlY3VhZGFzLCB5YSBxdWUgbGEgY2FsaWRhZCwgY29uZmlhYmlsaWRhZCB5IHJlbGV2YW5jaWEgZGUgbG9zIGRhdG9zIGRlcGVuZGVuIGRpcmVjdGFtZW50ZSBkZSBzdSBwcm9jZWRlbmNpYS4gRXhpc3RlbiBkaWZlcmVudGVzIHRpcG9zIGRlIGZ1ZW50ZXMgZGUgZGF0b3MsIHkgY2FkYSB1bmEgdGllbmUgc3VzIGNhcmFjdGVyw61zdGljYXMgcGFydGljdWxhcmVzLCB2ZW50YWphcyB5IGRlc3ZlbnRhamFzLiBBZGVtw6FzLCBldmFsdWFyIGxhIGNvbmZpYWJpbGlkYWQgZGUgbGFzIGZ1ZW50ZXMgZXMgZnVuZGFtZW50YWwgcGFyYSBnYXJhbnRpemFyIGxhIHZhbGlkZXogZGUgbG9zIHJlc3VsdGFkb3Mgb2J0ZW5pZG9zIGEgcGFydGlyIGRlIGxvcyBkYXRvcy4KICAgICAgLmNvbC1sZy0zLm15LWxnLTAubXktMy5qMQogICAgICAgIGltZy5pbWctdC5pbWctYShzcmM9J0AvYXNzZXRzL3RlbXBsYXRlL2ltYWdlcy90Ny8yLnBuZycpCiAgICAKICAgIFNlcGFyYWRvciAKICAgICN0XzdfMS50aXR1bG8tc2VndW5kby5jb2xvci1hY2VudG8tYm90b25lcwogICAgICBoMiA3LjEgQ2xhc2lmaWNhY2nDs24gZGUgZnVlbnRlcyBkZSBkYXRvczogcHJpbWFyaWFzIHkgc2VjdW5kYXJpYXMKICAgIHAgTGFzIGZ1ZW50ZXMgZGUgZGF0b3Mgc2UgY2xhc2lmaWNhbiBlbiBkb3MgZ3JhbmRlcyBjYXRlZ29yw61hczogZnVlbnRlcyBwcmltYXJpYXMgeSBmdWVudGVzIHNlY3VuZGFyaWFzLiBFc3RhIGNsYXNpZmljYWNpw7NuIGRlcGVuZGUgZGUgc2kgbG9zIGRhdG9zIGZ1ZXJvbiByZWNvbGVjdGFkb3MgZGlyZWN0YW1lbnRlIHBvciBlbCBpbnZlc3RpZ2Fkb3IgbyBzaSBmdWVyb24gb2J0ZW5pZG9zIGRlIGZ1ZW50ZXMgeWEgZXhpc3RlbnRlcy4KICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1jZW50ZXIubWItNQogICAgICAuY29sLWxnLTUKICAgICAgICBpbWcuaW1nLWEuaW1nLXQoc3JjPSdAL2Fzc2V0cy90ZW1wbGF0ZS9pbWFnZXMvdDcvMy5wbmcnLCBhbHQ9JycpIAogICAgICAuY29sLWxnLTcKICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIuYWxpZ24taXRlbXMtY2VudGVyCiAgICAgICAgICAuY29sLWxnLTEyCiAgICAgICAgICAgIC50aXR1bG8ubWItNChkYXRhLWFvcz0iZmxpcC11cCIpCiAgICAgICAgICAgICAgaDUubWItMC5wLTEgRnVlbnRlcyBkZSBkYXRvcyBwcmltYXJpYXMKICAgICAgICAgICAgcCAKICAgICAgICAgICAgICBiIERlZmluaWNpw7NuOgogICAgICAgICAgICAgIHwgIHNvbiBkYXRvcyByZWNvbGVjdGFkb3MgZGUgcHJpbWVyYSBtYW5vLCBlcyBkZWNpciwgZGlyZWN0YW1lbnRlIHBvciBlbCBpbnZlc3RpZ2Fkb3IgbyBsYSBlbnRpZGFkIHF1ZSBsbGV2YSBhIGNhYm8gZWwgZXN0dWRpby4gRXN0ZSB0aXBvIGRlIGZ1ZW50ZSBzZSB1dGlsaXphIGN1YW5kbyBsb3MgZGF0b3MgbmVjZXNhcmlvcyBubyBleGlzdGVuIHByZXZpYW1lbnRlIG8gY3VhbmRvIGVzIGltcG9ydGFudGUgdGVuZXIgY29udHJvbCB0b3RhbCBzb2JyZSBlbCBwcm9jZXNvIGRlIHJlY29sZWNjacOzbiBkZSBkYXRvcy4KICAgICAgICAgICAgcCAKICAgICAgICAgICAgICBiIEVqZW1wbG9zOiAKICAgICAgICAgICAgICB8IGVuY3Vlc3RhcywgZW50cmV2aXN0YXMsIGV4cGVyaW1lbnRvcywgb2JzZXJ2YWNpw7NuIGRpcmVjdGEuCiAgICAgICAgICAgIHAubWItMAogICAgICAgICAgICAgIGIgVmVudGFqYXMKICAgICAgICAgICAgdWwubGlzdGEtdWwtLWNvbG9yLmZhLXVsCiAgICAgICAgICAgICAgbGkubWItMAogICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2sudjEKICAgICAgICAgICAgICAgIHNwYW4KICAgICAgICAgICAgICAgICAgfCBDb250cm9sIHRvdGFsIHNvYnJlIGVsIHByb2Nlc28gZGUgcmVjb2xlY2Npw7NuIGRlIGRhdG9zLgogICAgICAgICAgICAgIGxpLm1iLTAKICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLnYxCiAgICAgICAgICAgICAgICBzcGFuCiAgICAgICAgICAgICAgICAgIHwgRGF0b3MgcGVyc29uYWxpemFkb3MgeSBlc3BlY8OtZmljb3MgcGFyYSBsb3Mgb2JqZXRpdm9zIGRlbCBlc3R1ZGlvLgogICAgICAgICAgICAgIGxpCiAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay52MQogICAgICAgICAgICAgICAgc3BhbgogICAgICAgICAgICAgICAgICB8IE1heW9yIGdyYWRvIGRlIHByZWNpc2nDs24geSByZWxldmFuY2lhLgogICAgICAgICAgICBwLm1iLTAgCiAgICAgICAgICAgICAgYiBEZXN2ZW50YWphcwogICAgICAgICAgICB1bC5saXN0YS11bC0tY29sb3IuZmEtdWwKICAgICAgICAgICAgICBsaS5tYi0wCiAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay52MQogICAgICAgICAgICAgICAgc3BhbgogICAgICAgICAgICAgICAgICB8IEVsIHByb2Nlc28gZGUgcmVjb2xlY2Npw7NuIHB1ZWRlIHNlciBjb3N0b3NvIHkgbGxldmFyIG11Y2hvIHRpZW1wby4KICAgICAgICAgICAgICBsaS5tYi0wCiAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay52MQogICAgICAgICAgICAgICAgc3BhbgogICAgICAgICAgICAgICAgICB8IFB1ZWRlIHNlciBkaWbDrWNpbCBhY2NlZGVyIGEgY2llcnRvcyB0aXBvcyBkZSBkYXRvcyBkZSBtYW5lcmEgZGlyZWN0YSAocG9yIGVqZW1wbG8sIGVuIGVzdHVkaW9zIGNvbiBncmFuZGVzIHBvYmxhY2lvbmVzKS4KICAgIAogICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLmFsaWduLWl0ZW1zLWNlbnRlci5tYi01CiAgICAgIC5jb2wtbGctNy5vcmRlci1sZy0xLm9yZGVyLTIKICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIuYWxpZ24taXRlbXMtY2VudGVyCiAgICAgICAgICAuY29sLWxnLTEyCiAgICAgICAgICAgIC50aXR1bG8ubWItNChkYXRhLWFvcz0iZmxpcC11cCIpCiAgICAgICAgICAgICAgaDUubWItMC5wLTEgRnVlbnRlcyBkZSBkYXRvcyBzZWN1bmRhcmlhcwogICAgICAgICAgICBwIAogICAgICAgICAgICAgIGIgRGVmaW5pY2nDs246CiAgICAgICAgICAgICAgfCAgc29uIGRhdG9zIHF1ZSB5YSBoYW4gc2lkbyByZWNvbGVjdGFkb3MgcG9yIG90cmEgcGVyc29uYSBvIGVudGlkYWQgcGFyYSBvdHJvcyBmaW5lcywgcGVybyBxdWUgc2UgcHVlZGVuIHJldXRpbGl6YXIgZW4gZWwgZXN0dWRpbyBhY3R1YWwuIExvcyBkYXRvcyBzZWN1bmRhcmlvcyBlc3TDoW4gZGlzcG9uaWJsZXMgZW4gaW5mb3JtZXMsIGJhc2VzIGRlIGRhdG9zLCBsaWJyb3MsIHB1YmxpY2FjaW9uZXMgYWNhZMOpbWljYXMsIGVudHJlIG90cm9zLgogICAgICAgICAgICBwIAogICAgICAgICAgICAgIGIgRWplbXBsb3M6IAogICAgICAgICAgICAgIHwgaW5mb3JtZXMgZ3ViZXJuYW1lbnRhbGVzLCBkYXRvcyBkZSBjZW5zb3MsIGVzdGFkw61zdGljYXMgZGUgaW5zdGl0dWNpb25lcywgaW52ZXN0aWdhY2lvbmVzIGFudGVyaW9yZXMsIGJhc2VzIGRlIGRhdG9zIHDDumJsaWNhcy4KICAgICAgICAgICAgcC5tYi0wCiAgICAgICAgICAgICAgYiBWZW50YWphcwogICAgICAgICAgICB1bC5saXN0YS11bC0tY29sb3IuZmEtdWwKICAgICAgICAgICAgICBsaS5tYi0wCiAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay52MQogICAgICAgICAgICAgICAgc3BhbgogICAgICAgICAgICAgICAgICB8IExvcyBkYXRvcyB5YSBlc3TDoW4gcmVjb2xlY3RhZG9zIHkgZGlzcG9uaWJsZXMsIGxvIHF1ZSBhaG9ycmEgdGllbXBvIHkgcmVjdXJzb3MuCiAgICAgICAgICAgICAgbGkubWItMAogICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2sudjEKICAgICAgICAgICAgICAgIHNwYW4KICAgICAgICAgICAgICAgICAgfCBTZSBwdWVkZW4gb2J0ZW5lciBkYXRvcyBoaXN0w7NyaWNvcyBvIGRlIHBvYmxhY2lvbmVzIGdyYW5kZXMgcXVlIHNlcsOtYW4gZGlmw61jaWxlcyBkZSByZWNvbGVjdGFyIGRlIG1hbmVyYSBwcmltYXJpYS4KICAgICAgICAgICAgICBsaQogICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2sudjEKICAgICAgICAgICAgICAgIHNwYW4KICAgICAgICAgICAgICAgICAgfCBFcyBtw6FzIGFjY2VzaWJsZSB5IGVjb27Ds21pY28uCiAgICAgICAgICAgIHAubWItMCAKICAgICAgICAgICAgICBiIERlc3ZlbnRhamFzCiAgICAgICAgICAgIHVsLmxpc3RhLXVsLS1jb2xvci5mYS11bAogICAgICAgICAgICAgIGxpLm1iLTAKICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLnYxCiAgICAgICAgICAgICAgICBzcGFuCiAgICAgICAgICAgICAgICAgIHwgTWVub3IgY29udHJvbCBzb2JyZSBsYSBjYWxpZGFkIGRlIGxvcyBkYXRvcyB5IGVsIHByb2Nlc28gZGUgcmVjb2xlY2Npw7NuLgogICAgICAgICAgICAgIGxpLm1iLTAKICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLnYxCiAgICAgICAgICAgICAgICBzcGFuCiAgICAgICAgICAgICAgICAgIHwgTG9zIGRhdG9zIHB1ZWRlbiBubyBzZXIgY29tcGxldGFtZW50ZSByZWxldmFudGVzIG8gZXNwZWPDrWZpY29zIHBhcmEgZWwgZXN0dWRpbyBhY3R1YWwuCiAgICAgICAgICAgICAgbGkubWItMAogICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2sudjEKICAgICAgICAgICAgICAgIHNwYW4KICAgICAgICAgICAgICAgICAgfCBQdWVkZW4gbm8gZXN0YXIgYWN0dWFsaXphZG9zIG8gc2VyIG9ic29sZXRvcy4KICAgICAgLmNvbC1sZy01Lm9yZGVyLWxnLTIub3JkZXItMQogICAgICAgIGltZy5pbWctYS5pbWctdChzcmM9J0AvYXNzZXRzL3RlbXBsYXRlL2ltYWdlcy90Ny80LnBuZycsIGFsdD0nJykgCgogICAgU2VwYXJhZG9yIAogICAgI3RfN18yLnRpdHVsby1zZWd1bmRvLmNvbG9yLWFjZW50by1ib3RvbmVzCiAgICAgIGgyIDcuMglNw6l0b2RvcyBwYXJhIGV2YWx1YXIgbGEgY29uZmlhYmlsaWRhZCB5IHZhbGlkZXogZGUgbGFzIGZ1ZW50ZXMKICAgIHAgTGEgY29uZmlhYmlsaWRhZCB5IHZhbGlkZXogZGUgbGFzIGZ1ZW50ZXMgZGUgZGF0b3Mgc29uIGFzcGVjdG9zIGNyw610aWNvcyBxdWUgZGViZW4gZXZhbHVhcnNlIGFudGVzIGRlIHVzYXIgbG9zIGRhdG9zIGVuIHVuIGFuw6FsaXNpcy4gTG9zIGRhdG9zIGNvbmZpYWJsZXMgc29uIGFxdWVsbG9zIHF1ZSBwdWVkZW4gcmVwbGljYXJzZSB5IHF1ZSBwcm9kdWNlbiByZXN1bHRhZG9zIGNvbnNpc3RlbnRlcywgbWllbnRyYXMgcXVlIGxvcyBkYXRvcyB2w6FsaWRvcyBzb24gYXF1ZWxsb3MgcXVlIHJlYWxtZW50ZSBtaWRlbiBsbyBxdWUgc2Ugc3Vwb25lIHF1ZSBkZWJlbiBtZWRpci4KICAgIFRhYnNDLmNvbG9yLWFjZW50by1ib3RvbmVzLm1iLTUKICAgICAgLnAtNC5weS05OS5weS1tZC01KHRpdHVsbz0iQ3JpdGVyaW9zIHBhcmEgZXZhbHVhciBsYSBjb25maWFiaWxpZGFkIGRlIHVuYSBmdWVudGUgZGUgZGF0b3MiKQogICAgICAgIC5yb3cKICAgICAgICAgIC5jb2wtbGctNAogICAgICAgICAgICBpbWcuaW1nLWEuaW1nLXQoc3JjPSdAL2Fzc2V0cy90ZW1wbGF0ZS9pbWFnZXMvdDcvNS5wbmcnLCBhbHQ9JycpCiAgICAgICAgICAuY29sLWxnLTgubWItNC5tYi1tZC0wLnAtNAogICAgICAgICAgICB1bC5saXN0YS11bC0tY29sb3IuZmEtdWwKICAgICAgICAgICAgICBsaS5tYi0zCiAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay52MQogICAgICAgICAgICAgICAgc3BhbgogICAgICAgICAgICAgICAgICBiIFByb2NlZGVuY2lhOgogICAgICAgICAgICAgICAgICB8ICBpZGVudGlmaWNhciBlbCBvcmlnZW4gZGUgbG9zIGRhdG9zLiBMb3MgZGF0b3MgcHJvdmVuaWVudGVzIGRlIGluc3RpdHVjaW9uZXMgcmVjb25vY2lkYXMsIGFnZW5jaWFzIGd1YmVybmFtZW50YWxlcyBvIGVudGlkYWRlcyBkZSBpbnZlc3RpZ2FjacOzbiByZXNwZXRhZGFzIHN1ZWxlbiBzZXIgbcOhcyBjb25maWFibGVzLgogICAgICAgICAgICAgIGxpLm1iLTMKICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLnYxCiAgICAgICAgICAgICAgICBzcGFuCiAgICAgICAgICAgICAgICAgIGIgTcOpdG9kbyBkZSByZWNvbGVjY2nDs246CiAgICAgICAgICAgICAgICAgIHwgIHJldmlzYXIgY8OzbW8gc2Ugb2J0dXZpZXJvbiBsb3MgZGF0b3MuIE3DqXRvZG9zIHJpZ3Vyb3NvcyB5IGVzdGFuZGFyaXphZG9zIGRlIHJlY29sZWNjacOzbiBhdW1lbnRhbiBsYSBjb25maWFiaWxpZGFkLgogICAgICAgICAgICAgIGxpLm1iLTMKICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLnYxCiAgICAgICAgICAgICAgICBzcGFuCiAgICAgICAgICAgICAgICAgIGIgQWN0dWFsaWRhZDoKICAgICAgICAgICAgICAgICAgfCAgbG9zIGRhdG9zIGN1YW50aXRhdGl2b3Mgc2UgdXRpbGl6YW4gcGFyYSBjYWxjdWxhciB0ZW5kZW5jaWFzIGNlbnRyYWxlcyAobWVkaWEsIG1lZGlhbmEsIG1vZGEpLCBtZWRpZGFzIGRlIGRpc3BlcnNpw7NuIChkZXN2aWFjacOzbiBlc3TDoW5kYXIsIHZhcmlhbnphKSwgeSBwYXJhIHJlYWxpemFyIHBydWViYXMgZGUgaGlww7N0ZXNpcyBvIGFuw6FsaXNpcyBkZSByZWdyZXNpw7NuLgogICAgICAgICAgICAgIGxpLm1iLTMKICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLnYxCiAgICAgICAgICAgICAgICBzcGFuCiAgICAgICAgICAgICAgICAgIGIgQ29uc2lzdGVuY2lhOgogICAgICAgICAgICAgICAgICB8ICB2ZXJpZmljYXIgc2kgbG9zIGRhdG9zIHNvbiBjb25zaXN0ZW50ZXMgYSBsbyBsYXJnbyBkZWwgdGllbXBvIHkgZW50cmUgZGlmZXJlbnRlcyBmdWVudGVzLiBJbmNvbnNpc3RlbmNpYXMgcHVlZGVuIGluZGljYXIgcHJvYmxlbWFzIGVuIGxhIHJlY29sZWNjacOzbiBvIHByb2Nlc2FtaWVudG8gZGUgbG9zIGRhdG9zLgogICAgICAucC00LnB5LTk5LnB5LW1kLTUodGl0dWxvPSJDcml0ZXJpb3MgcGFyYSBldmFsdWFyIGxhIHZhbGlkZXogZGUgdW5hIGZ1ZW50ZSBkZSBkYXRvcyIpCiAgICAgICAgLnJvdwogICAgICAgICAgLmNvbC1sZy00CiAgICAgICAgICAgIGltZy5pbWctYS5pbWctdChzcmM9J0AvYXNzZXRzL3RlbXBsYXRlL2ltYWdlcy90Ny82LnBuZycsIGFsdD0nJykKICAgICAgICAgIC5jb2wtbGctOC5tYi00Lm1iLW1kLTAucC00CiAgICAgICAgICAgIHVsLmxpc3RhLXVsLS1jb2xvci5mYS11bAogICAgICAgICAgICAgIGxpLm1iLTMKICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLnYxCiAgICAgICAgICAgICAgICBzcGFuCiAgICAgICAgICAgICAgICAgIGIgUGVydGluZW5jaWE6CiAgICAgICAgICAgICAgICAgIHwgIGxvcyBkYXRvcyBkZWJlbiBzZXIgcmVsZXZhbnRlcyB5IGRpcmVjdGFtZW50ZSBhcGxpY2FibGVzIGEgbG9zIG9iamV0aXZvcyBkZWwgZXN0dWRpby4gRGF0b3MgaXJyZWxldmFudGVzIG8gZnVlcmEgZGUgY29udGV4dG8gcHVlZGVuIHNlc2dhciBsb3MgcmVzdWx0YWRvcy4KICAgICAgICAgICAgICBsaS5tYi0zCiAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay52MQogICAgICAgICAgICAgICAgc3BhbgogICAgICAgICAgICAgICAgICBiIEV4YWN0aXR1ZDoKICAgICAgICAgICAgICAgICAgfCAgU2UgcmVmaWVyZSBhIHF1w6kgdGFuIGJpZW4gbG9zIGRhdG9zIHJlZmxlamFuIGxhIHJlYWxpZGFkIHF1ZSBzZSBwcmV0ZW5kZSBtZWRpci4gTGFzIGRlZmluaWNpb25lcyB1dGlsaXphZGFzIGVuIGxhIHJlY29sZWNjacOzbiBkZSBkYXRvcyBkZWJlbiBzZXIgY2xhcmFzIHkgYWRlY3VhZGFzLgogICAgICAgICAgICAgIGxpLm1iLTMKICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLnYxCiAgICAgICAgICAgICAgICBzcGFuCiAgICAgICAgICAgICAgICAgIGIgVHJhbnNwYXJlbmNpYToKICAgICAgICAgICAgICAgICAgfCAgbGFzIGZ1ZW50ZXMgY29uZmlhYmxlcyBzdWVsZW4gc2VyIHRyYW5zcGFyZW50ZXMgc29icmUgbG9zIG3DqXRvZG9zIHkgcHJvY2VkaW1pZW50b3MgdXRpbGl6YWRvcyBwYXJhIHJlY29sZWN0YXIgbG9zIGRhdG9zLiBMYSBmYWx0YSBkZSBpbmZvcm1hY2nDs24gc29icmUgZWwgb3JpZ2VuIHkgbGEgbWV0b2RvbG9nw61hIGRlIGxvcyBkYXRvcyBwdWVkZSBzZXIgdW5hIHNlw7FhbCBkZSBiYWphIGNhbGlkYWQuCiAgICAgICAgICAgICAgbGkubWItMwogICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2sudjEKICAgICAgICAgICAgICAgIHNwYW4KICAgICAgICAgICAgICAgICAgYiBJbXBhcmNpYWxpZGFkOgogICAgICAgICAgICAgICAgICB8ICBlcyBpbXBvcnRhbnRlIHF1ZSBsYSBmdWVudGUgbm8gdGVuZ2EgY29uZmxpY3RvcyBkZSBpbnRlcsOpcyBvIHNlc2dvcyBxdWUgcHVlZGFuIGhhYmVyIGluZmx1aWRvIGVuIGxhIHJlY29sZWNjacOzbiBvIHByZXNlbnRhY2nDs24gZGUgbG9zIGRhdG9zLiBGdWVudGVzIGltcGFyY2lhbGVzIHkgb2JqZXRpdmFzIHByb3BvcmNpb25hbiBkYXRvcyBtw6FzIGNvbmZpYWJsZXMuCiAgICBTZXBhcmFkb3IgCiAgICAjdF83XzMudGl0dWxvLXNlZ3VuZG8uY29sb3ItYWNlbnRvLWJvdG9uZXMKICAgICAgaDIgNy4zCVVzbyBkZSBmdWVudGVzIGRlIGRhdG9zIHByaW1hcmlhcyBlbiBlbmN1ZXN0YXMgeSBlc3R1ZGlvcwogICAgcCBMYXMgCiAgICAgIGIgZnVlbnRlcyBkZSBkYXRvcyBwcmltYXJpYXMKICAgICAgfCAgc29uIGVzcGVjaWFsbWVudGUgw7p0aWxlcyBlbiBlc3R1ZGlvcyBxdWUgcmVxdWllcmVuIGRhdG9zIHBlcnNvbmFsaXphZG9zIHkgZXNwZWPDrWZpY29zLCBjb21vIGVuY3Vlc3RhcyBvIGludmVzdGlnYWNpb25lcyBxdWUgYnVzY2FuIG1lZGlyIHVuYSBjYXJhY3RlcsOtc3RpY2EgcGFydGljdWxhciBkZSB1bmEgcG9ibGFjacOzbi4gQWxndW5vcyBhc3BlY3RvcyBpbXBvcnRhbnRlcyBhbCB1c2FyIGZ1ZW50ZXMgcHJpbWFyaWFzIGluY2x1eWVuOgogICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLm1iLTQgCiAgICAgIC5jb2wtbGctNC5teS0zCiAgICAgICAgaW1nLmltZy1hLmltZy10KHNyYz0nQC9hc3NldHMvdGVtcGxhdGUvaW1hZ2VzL3Q2LzEwLnBuZycsIGFsdD0nJykgCiAgICAgIC5jb2wtbGctOC5teS0zCiAgICAgICAgQWNvcmRpb25BKHRpcG89ImEiIGNsYXNlLXRhcmpldGE9InRhcmpldGEgdGFyamV0YS0tYXp1bCIpCiAgICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIodGl0dWxvPSJEaXNlw7FvIGRlIGVuY3Vlc3RhcyIpCiAgICAgICAgICAgIC5jb2wtbGctMTIubXktMwogICAgICAgICAgICAgIHAgVW5hIGVuY3Vlc3RhIGJpZW4gZGlzZcOxYWRhIGVzIGNsYXZlIHBhcmEgcmVjb2xlY3RhciBkYXRvcyBwcmltYXJpb3MgZGUgYWx0YSBjYWxpZGFkLiBMYXMgcHJlZ3VudGFzIGRlYmVuIHNlciBjbGFyYXMsIHByZWNpc2FzIHkgZXN0YXIgYWxpbmVhZGFzIGNvbiBsb3Mgb2JqZXRpdm9zIGRlbCBlc3R1ZGlvLgogICAgICAgICAgICAgIHVsLmxpc3RhLXVsLS1jb2xvci5mYS11bAogICAgICAgICAgICAgICAgbGkubWItMwogICAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay52MQogICAgICAgICAgICAgICAgICBzcGFuCiAgICAgICAgICAgICAgICAgICAgYiBQcmVndW50YXMgY2VycmFkYXM6CiAgICAgICAgICAgICAgICAgICAgfCAgb2ZyZWNlbiBvcGNpb25lcyBkZSByZXNwdWVzdGEgcHJlZGVmaW5pZGFzIHkgc29uIGbDoWNpbGVzIGRlIGFuYWxpemFyLgogICAgICAgICAgICAgICAgbGkubWItMwogICAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay52MQogICAgICAgICAgICAgICAgICBzcGFuCiAgICAgICAgICAgICAgICAgICAgYiBQcmVndW50YXMgYWJpZXJ0YXM6CiAgICAgICAgICAgICAgICAgICAgfCBwZXJtaXRlbiByZXNwdWVzdGFzIG3DoXMgZGV0YWxsYWRhcywgYXVucXVlIHNvbiBtw6FzIGRpZsOtY2lsZXMgZGUgcHJvY2VzYXIgeSBhbmFsaXphci4KCiAgICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIodGl0dWxvPSJDb250cm9sIGRlIGNhbGlkYWQiKQogICAgICAgICAgICAuY29sLWxnLTEyLm15LTMKICAgICAgICAgICAgICBwIER1cmFudGUgbGEgcmVjb2xlY2Npw7NuIGRlIGRhdG9zIHByaW1hcmlvcywgZXMgZnVuZGFtZW50YWwgaW1wbGVtZW50YXIgbWVjYW5pc21vcyBwYXJhIGdhcmFudGl6YXIgbGEgY2FsaWRhZCBkZSBsb3MgZGF0b3MsIGNvbW8gbGEgY2FwYWNpdGFjacOzbiBkZSBsb3MgZW5jdWVzdGFkb3JlcywgbGEgc3VwZXJ2aXNpw7NuIGRlIGxhcyBlbnRyZXZpc3RhcyB5IGxhIHJlYWxpemFjacOzbiBkZSBwcnVlYmFzIHBpbG90by4KICAgICAgICAgICAgICAKICAgICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlcih0aXR1bG89IlZlbnRhamFzIGRlbCB1c28gZGUgZnVlbnRlcyBwcmltYXJpYXMiKQogICAgICAgICAgICAuY29sLWxnLTEyLm15LTMKICAgICAgICAgICAgICB1bC5saXN0YS11bC0tY29sb3IuZmEtdWwKICAgICAgICAgICAgICAgIGxpLm1iLTMKICAgICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2sudjEKICAgICAgICAgICAgICAgICAgc3BhbgogICAgICAgICAgICAgICAgICAgIHwgUHJvcG9yY2lvbmFuIGRhdG9zIGFjdHVhbGl6YWRvcyB5IGVzcGVjw61maWNvcyBwYXJhIGVsIGVzdHVkaW8uCiAgICAgICAgICAgICAgICBsaS5tYi0zCiAgICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLnYxCiAgICAgICAgICAgICAgICAgIHNwYW4KICAgICAgICAgICAgICAgICAgICB8IE1heW9yIGZsZXhpYmlsaWRhZCBwYXJhIGFqdXN0YXIgZWwgZGlzZcOxbyBkZSBsYSByZWNvbGVjY2nDs24gZGUgZGF0b3Mgc2Vnw7puIGxhcyBuZWNlc2lkYWRlcyBkZWwgcHJveWVjdG8uCgogICAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyKHRpdHVsbz0iRGVzYWbDrW9zIikKICAgICAgICAgICAgLmNvbC1sZy0xMi5teS0zCiAgICAgICAgICAgICAgdWwubGlzdGEtdWwtLWNvbG9yLmZhLXVsCiAgICAgICAgICAgICAgICBsaS5tYi0zCiAgICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLnYxCiAgICAgICAgICAgICAgICAgIHNwYW4KICAgICAgICAgICAgICAgICAgICB8IFJlcXVpZXJlIG3DoXMgdGllbXBvIHkgcmVjdXJzb3MgcXVlIGVsIHVzbyBkZSBmdWVudGVzIHNlY3VuZGFyaWFzLgogICAgICAgICAgICAgICAgbGkubWItMwogICAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay52MQogICAgICAgICAgICAgICAgICBzcGFuCiAgICAgICAgICAgICAgICAgICAgfCBMYSByZWNvbGVjY2nDs24gZGUgZGF0b3MgcHJpbWFyaW9zIHB1ZWRlIGVzdGFyIHN1amV0YSBhIHNlc2dvcyBzaSBubyBzZSBkaXNlw7FhIGFkZWN1YWRhbWVudGUgZWwgcHJvY2VzbyAocG9yIGVqZW1wbG8sIHNlc2dvIGRlIHNlbGVjY2nDs24gbyBzZXNnbyBkZSByZXNwdWVzdGEpLgogICAgU2VwYXJhZG9yIAogICAgI3RfN180LnRpdHVsby1zZWd1bmRvLmNvbG9yLWFjZW50by1ib3RvbmVzCiAgICAgIGgyIDcuNAlGdWVudGVzIGRlIGRhdG9zIHNlY3VuZGFyaWFzOiBiYXNlcyBkZSBkYXRvcyBww7pibGljYXMsIGluZm9ybWVzIHkgcHVibGljYWNpb25lcwogICAgcCBMYXMgCiAgICAgIGIgZnVlbnRlcyBkZSBkYXRvcyBzZWN1bmRhcmlhcwogICAgICB8ICBpbmNsdXllbiB1bmEgYW1wbGlhIGdhbWEgZGUgbWF0ZXJpYWxlcyBxdWUgcHVlZGVuIHNlciByZXV0aWxpemFkb3MgcGFyYSBpbnZlc3RpZ2FjaW9uZXMgYWN0dWFsZXMuIEFsZ3Vub3MgZWplbXBsb3MgZGUgZXN0YXMgZnVlbnRlcyBpbmNsdXllbjoKICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5tYi00IAogICAgICAuY29sLWxnLTgubXktMy5vcmRlci1sZy0xLm9yZGVyLTIKICAgICAgICBBY29yZGlvbkEodGlwbz0iYSIgY2xhc2UtdGFyamV0YT0idGFyamV0YSB0YXJqZXRhLS1henVsIikKICAgICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlcih0aXR1bG89IkJhc2VzIGRlIGRhdG9zIHDDumJsaWNhcyIpCiAgICAgICAgICAgIC5jb2wtbGctMTIubXktMwogICAgICAgICAgICAgIHAgTXVjaG9zIGdvYmllcm5vcywgb3JnYW5pemFjaW9uZXMgbm8gZ3ViZXJuYW1lbnRhbGVzIChPTkdzKSB5IG9yZ2FuaXNtb3MgaW50ZXJuYWNpb25hbGVzIHByb3BvcmNpb25hbiBhY2Nlc28gZ3JhdHVpdG8gYSBiYXNlcyBkZSBkYXRvcyBxdWUgY29udGllbmVuIGluZm9ybWFjacOzbiBlc3RhZMOtc3RpY2EgeSByZWdpc3Ryb3MgYWRtaW5pc3RyYXRpdm9zLiBFc3RhcyBiYXNlcyBkZSBkYXRvcyBwdWVkZW4gc2VyIGVzcGVjaWFsbWVudGUgw7p0aWxlcyBwYXJhIGVzdHVkaW9zIGEgZ3JhbiBlc2NhbGEuCiAgICAgICAgICAgICAgdWwubGlzdGEtdWwtLWNvbG9yLmZhLXVsCiAgICAgICAgICAgICAgICBsaS5tYi0zCiAgICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLnYxCiAgICAgICAgICAgICAgICAgIHNwYW4KICAgICAgICAgICAgICAgICAgICBiIEVqZW1wbG9zOgogICAgICAgICAgICAgICAgICAgIHwgIGRhdG9zIGRlIGNlbnNvcywgYmFzZXMgZGUgZGF0b3MgZGUgc2FsdWQsIGRhdG9zIGVjb27Ds21pY29zLCBlc3RhZMOtc3RpY2FzIGVkdWNhdGl2YXMuCgogICAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyKHRpdHVsbz0iSW5mb3JtZXMiKQogICAgICAgICAgICAuY29sLWxnLTEyLm15LTMKICAgICAgICAgICAgICBwIExvcyBpbmZvcm1lcyBkZSBpbnN0aXR1Y2lvbmVzIGFjYWTDqW1pY2FzLCBhZ2VuY2lhcyBndWJlcm5hbWVudGFsZXMsIGVtcHJlc2FzIHByaXZhZGFzIHkgb3JnYW5pc21vcyBpbnRlcm5hY2lvbmFsZXMgc29uIG90cmEgZnVlbnRlIGltcG9ydGFudGUgZGUgZGF0b3Mgc2VjdW5kYXJpb3MuIEVzdG9zIGluZm9ybWVzIGEgbWVudWRvIGNvbnRpZW5lbiBhbsOhbGlzaXMgZXhoYXVzdGl2b3MgeSBkYXRvcyB5YSBwcm9jZXNhZG9zLgogICAgICAgICAgICAgIHVsLmxpc3RhLXVsLS1jb2xvci5mYS11bAogICAgICAgICAgICAgICAgbGkubWItMwogICAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay52MQogICAgICAgICAgICAgICAgICBzcGFuCiAgICAgICAgICAgICAgICAgICAgYiBFamVtcGxvczoKICAgICAgICAgICAgICAgICAgICB8ICBpbmZvcm1lcyBkZSBkZXNhcnJvbGxvIGh1bWFubywgaW5mb3JtZXMgZGUgc2FsdWQgcMO6YmxpY2EsIHJlcG9ydGVzIGRlIG1lcmNhZG8uCiAgICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIodGl0dWxvPSJQdWJsaWNhY2lvbmVzIGFjYWTDqW1pY2FzIikKICAgICAgICAgICAgLmNvbC1sZy0xMi5teS0zCiAgICAgICAgICAgICAgcCBMb3MgYXJ0w61jdWxvcyBkZSBpbnZlc3RpZ2FjacOzbiBwdWJsaWNhZG9zIGVuIHJldmlzdGFzIGNpZW50w61maWNhcyBhIG1lbnVkbyBwcmVzZW50YW4gZGF0b3MgcXVlIHNlIHB1ZWRlbiByZXV0aWxpemFyIGVuIGVzdHVkaW9zIHBvc3RlcmlvcmVzLCBlc3BlY2lhbG1lbnRlIGVuIHJldmlzaW9uZXMgZGUgbGl0ZXJhdHVyYSBvIGVzdHVkaW9zIGNvbXBhcmF0aXZvcy4KICAgICAgICAgICAgICB1bC5saXN0YS11bC0tY29sb3IuZmEtdWwKICAgICAgICAgICAgICAgIGxpLm1iLTMKICAgICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2sudjEKICAgICAgICAgICAgICAgICAgc3BhbgogICAgICAgICAgICAgICAgICAgIGIgRWplbXBsb3M6CiAgICAgICAgICAgICAgICAgICAgfCAgZXN0dWRpb3MgZGUgY2FzbywgcmV2aXNpb25lcyBzaXN0ZW3DoXRpY2FzLCBhbsOhbGlzaXMgZXN0YWTDrXN0aWNvcyBwcmV2aW9zLgoKICAgICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlcih0aXR1bG89IlZlbnRhamFzIGRlbCB1c28gZGUgZnVlbnRlcyBzZWN1bmRhcmlhcyIpCiAgICAgICAgICAgIC5jb2wtbGctMTIubXktMwogICAgICAgICAgICAgIHVsLmxpc3RhLXVsLS1jb2xvci5mYS11bAogICAgICAgICAgICAgICAgbGkubWItMwogICAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay52MQogICAgICAgICAgICAgICAgICBzcGFuCiAgICAgICAgICAgICAgICAgICAgfCBTb24gZGUgZsOhY2lsIGFjY2VzbyB5IGdlbmVyYWxtZW50ZSBtZW5vcyBjb3N0b3NhcyBxdWUgbGEgcmVjb2xlY2Npw7NuIGRlIGRhdG9zIHByaW1hcmlvcy4KICAgICAgICAgICAgICAgIGxpLm1iLTMKICAgICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2sudjEKICAgICAgICAgICAgICAgICAgc3BhbgogICAgICAgICAgICAgICAgICAgIHwgUHJvcG9yY2lvbmFuIGRhdG9zIGhpc3TDs3JpY29zIHF1ZSBwZXJtaXRlbiByZWFsaXphciBlc3R1ZGlvcyBsb25naXR1ZGluYWxlcyBvIGFuYWxpemFyIHRlbmRlbmNpYXMgYSBsbyBsYXJnbyBkZWwgdGllbXBvLgoKICAgICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlcih0aXR1bG89IkxpbWl0YWNpb25lcyIpCiAgICAgICAgICAgIC5jb2wtbGctMTIubXktMwogICAgICAgICAgICAgIHVsLmxpc3RhLXVsLS1jb2xvci5mYS11bAogICAgICAgICAgICAgICAgbGkubWItMwogICAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay52MQogICAgICAgICAgICAgICAgICBzcGFuCiAgICAgICAgICAgICAgICAgICAgfCBMYSByZWxldmFuY2lhIGRlIGxvcyBkYXRvcyBzZWN1bmRhcmlvcyBwdWVkZSBubyBjb2luY2lkaXIgY29tcGxldGFtZW50ZSBjb24gbG9zIG9iamV0aXZvcyBkZWwgZXN0dWRpby4KICAgICAgICAgICAgICAgIGxpLm1iLTMKICAgICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2sudjEKICAgICAgICAgICAgICAgICAgc3BhbgogICAgICAgICAgICAgICAgICAgIHwgTG9zIGRhdG9zIHNlY3VuZGFyaW9zIHB1ZWRlbiBlc3RhciBkZXNhY3R1YWxpemFkb3MgbyBubyBoYWJlciBzaWRvIHJlY29sZWN0YWRvcyBjb24gZWwgcmlnb3IgbmVjZXNhcmlvLgogICAgICAuY29sLWxnLTQubXktMy5vcmRlci1sZy0yLm9yZGVyLTEKICAgICAgICBpbWcuaW1nLWEuaW1nLXQoc3JjPSdAL2Fzc2V0cy90ZW1wbGF0ZS9pbWFnZXMvdDcvOC5wbmcnLCBhbHQ9JycpIAogICAgICAKICAgIFNlcGFyYWRvciAKICAgICN0XzdfNS50aXR1bG8tc2VndW5kby5jb2xvci1hY2VudG8tYm90b25lcwogICAgICBoMiA3LjUJRXN0cmF0ZWdpYXMgcGFyYSBjb21iaW5hciBmdWVudGVzIGRlIGRhdG9zIG3Dumx0aXBsZXMgZW4gdW4gYW7DoWxpc2lzIGVzdGFkw61zdGljbwogICAgcCBFbiBtdWNob3MgZXN0dWRpb3MgZXN0YWTDrXN0aWNvcywgc2UgcHVlZGVuIGNvbWJpbmFyIGZ1ZW50ZXMgZGUgZGF0b3MgcHJpbWFyaWFzIHkgc2VjdW5kYXJpYXMgcGFyYSBvYnRlbmVyIHVuYSB2aXNpw7NuIG3DoXMgY29tcGxldGEgeSBlbnJpcXVlY2lkYSBkZWwgZmVuw7NtZW5vIHF1ZSBzZSBlc3TDoSBhbmFsaXphbmRvLiBBbGd1bmFzIGVzdHJhdGVnaWFzIHBhcmEgY29tYmluYXIgZXN0YXMgZnVlbnRlcyBpbmNsdXllbjoKICAgIC5yb3cuYmcxNXMuYWxpZ24taXRlbXMtY2VudGVyLm1iLTUKICAgICAgLnB4LWxnLTUucHgtNAogICAgICAgIC5iZ3cuYnJhZC5wLTUubXktNQogICAgICAgICAgU2x5ZGVyQSh0aXBvPSJiIikKICAgICAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyCiAgICAgICAgICAgICAgLmNvbC1sZy03Lm15LTIKICAgICAgICAgICAgICAgIGg1IFRyaWFuZ3VsYWNpw7NuCiAgICAgICAgICAgICAgICBwIENvbnNpc3RlIGVuIHV0aWxpemFyIG3Dumx0aXBsZXMgZnVlbnRlcyBkZSBkYXRvcyBwYXJhIHZlcmlmaWNhciB5IHZhbGlkYXIgbG9zIHJlc3VsdGFkb3Mgb2J0ZW5pZG9zLiBQb3IgZWplbXBsbywgc2kgdW4gZXN0dWRpbyBkZSBtZXJjYWRvIHV0aWxpemEgZW5jdWVzdGFzIHByaW1hcmlhcyB5IGRhdG9zIHNlY3VuZGFyaW9zIGRlIGluZm9ybWVzIGRlbCBzZWN0b3IsIGxhIHRyaWFuZ3VsYWNpw7NuIHB1ZWRlIGF5dWRhciBhIGNvbmZpcm1hciBzaSBsYXMgdGVuZGVuY2lhcyBvYnNlcnZhZGFzIHNvbiBjb2hlcmVudGVzIGVudHJlIGxhcyBkaWZlcmVudGVzIGZ1ZW50ZXMuCiAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgLmNvbC1sZy00Lm15LTIgCiAgICAgICAgICAgICAgICBpbWcuaW1nLWEuaW1nLXQoc3JjPSdAL2Fzc2V0cy90ZW1wbGF0ZS9pbWFnZXMvdDcvOS5wbmcnLCBhbHQ9JycpICAgCiAgICAgICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlcgogICAgICAgICAgICAgIC5jb2wtbGctNy5teS0yCiAgICAgICAgICAgICAgICBoNSBJbnRlZ3JhY2nDs24gZGUgZGF0b3MKICAgICAgICAgICAgICAgIHAgRW4gYWxndW5vcyBlc3R1ZGlvcywgZXMgcG9zaWJsZSBjb21iaW5hciBiYXNlcyBkZSBkYXRvcyBwcm92ZW5pZW50ZXMgZGUgZGlzdGludGFzIGZ1ZW50ZXMgcGFyYSByZWFsaXphciBhbsOhbGlzaXMgbcOhcyBkZXRhbGxhZG9zLiBFc3RvIGVzIGNvbcO6biBlbiBlc3R1ZGlvcyBkZSBzYWx1ZCwgZG9uZGUgc2UgcHVlZGVuIGNvbWJpbmFyIHJlZ2lzdHJvcyBkZSBwYWNpZW50ZXMgY29uIGRhdG9zIGRlbW9ncsOhZmljb3MgbyBzb2Npb2Vjb27Ds21pY29zLgogICAgICAgICAgICAgIC5jb2wtbGctNC5teS0yIAogICAgICAgICAgICAgICAgaW1nLmltZy1hLmltZy10KHNyYz0nQC9hc3NldHMvdGVtcGxhdGUvaW1hZ2VzL3Q3LzEwLnBuZycsIGFsdD0nJykgIAogICAgICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIKICAgICAgICAgICAgICAuY29sLWxnLTcubXktMgogICAgICAgICAgICAgICAgaDUgVXNvIHNlY3VlbmNpYWwgZGUgZnVlbnRlcwogICAgICAgICAgICAgICAgcCBFbiBhbGd1bm9zIGNhc29zLCBsb3MgZGF0b3Mgc2VjdW5kYXJpb3Mgc2UgdXRpbGl6YW4gY29tbyB1bmEgcHJpbWVyYSBhcHJveGltYWNpw7NuIHBhcmEgaWRlbnRpZmljYXIgdGVuZGVuY2lhcyBvIMOhcmVhcyBkZSBpbnRlcsOpcywgeSBsdWVnbyBzZSByZWNvbGVjdGFuIGRhdG9zIHByaW1hcmlvcyBtw6FzIGVzcGVjw61maWNvcyBwYXJhIHByb2Z1bmRpemFyIGVuIGVzYXMgw6FyZWFzLgoKICAgICAgICAgICAgICAuY29sLWxnLTQubXktMiAKICAgICAgICAgICAgICAgIGltZy5pbWctYS5pbWctdChzcmM9J0AvYXNzZXRzL3RlbXBsYXRlL2ltYWdlcy90Ny8xMS5wbmcnLCBhbHQ9JycpICAKICAgICAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyCiAgICAgICAgICAgICAgLmNvbC1sZy03Lm15LTIKICAgICAgICAgICAgICAgIGg1IEFuw6FsaXNpcyBjb21wYXJhdGl2bwogICAgICAgICAgICAgICAgcCBDb21wYXJhciBsb3MgZGF0b3Mgb2J0ZW5pZG9zIGRlIGRpc3RpbnRhcyBmdWVudGVzIChwcmltYXJpYXMgeSBzZWN1bmRhcmlhcykgcGFyYSBhbmFsaXphciBkaXNjcmVwYW5jaWFzIHkgbWVqb3JhciBsYSBjb21wcmVuc2nDs24gZGVsIGZlbsOzbWVuby4gTGFzIGRpZmVyZW5jaWFzIGVudHJlIGxvcyByZXN1bHRhZG9zIHB1ZWRlbiBwcm9wb3JjaW9uYXIgaW5mb3JtYWNpw7NuIHZhbGlvc2Egc29icmUgbGFzIGxpbWl0YWNpb25lcyBkZSBsYXMgZGlzdGludGFzIGZ1ZW50ZXMgZGUgZGF0b3MgbyBzb2JyZSB2YXJpYWNpb25lcyBlbiBlbCBmZW7Ds21lbm8gZXN0dWRpYWRvLgoKICAgICAgICAgICAgICAuY29sLWxnLTQubXktMiAKICAgICAgICAgICAgICAgIGltZy5pbWctYS5pbWctdChzcmM9J0AvYXNzZXRzL3RlbXBsYXRlL2ltYWdlcy90Ny8xMi5wbmcnLCBhbHQ9JycpCiAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIKICAgICAgLmNvbC1sZy0xMi5teS0zCiAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLmFsaWduLWl0ZW1zLWNlbnRlci5wLTQuYnJhZC5tYi01CiAgICAgICAgICAuY29sLWxnLWF1dG8KICAgICAgICAgICAgaW1nLmltZy1hLmltZy10KHNyYz0nQC9hc3NldHMvdGVtcGxhdGUvaW1hZ2VzL3Q3LzEzLnN2ZycgYWx0PScnKQogICAgICAgICAgLmNvbC5wdC1sZy0wLnB0LW1kLTQKICAgICAgICAgICAgcC5tYi0wCiAgICAgICAgICAgICAgfCBMYXMgZnVlbnRlcyBkZSBkYXRvcywgdGFudG8gcHJpbWFyaWFzIGNvbW8gc2VjdW5kYXJpYXMsIHNvbiBmdW5kYW1lbnRhbGVzIHBhcmEgbGEgcmVhbGl6YWNpw7NuIGRlIGVzdHVkaW9zIGVzdGFkw61zdGljb3MuIExhcyBmdWVudGVzIHByaW1hcmlhcyBwZXJtaXRlbiByZWNvbGVjdGFyIGRhdG9zIGVzcGVjw61maWNvcyB5IGFjdHVhbGl6YWRvcywgbWllbnRyYXMgcXVlIGxhcyBmdWVudGVzIHNlY3VuZGFyaWFzIHByb3BvcmNpb25hbiBhY2Nlc28gYSBncmFuZGVzIHZvbMO6bWVuZXMgZGUgZGF0b3MgeWEgZGlzcG9uaWJsZXMuIEV2YWx1YXIgbGEgY29uZmlhYmlsaWRhZCB5IHZhbGlkZXogZGUgbGFzIGZ1ZW50ZXMgZGUgZGF0b3MgZXMgbmVjZXNhcmlvIHBhcmEgYXNlZ3VyYXIgbGEgY2FsaWRhZCBkZWwgYW7DoWxpc2lzIHkgbGFzIGNvbmNsdXNpb25lcyBvYnRlbmlkYXMuIExhIGNvbWJpbmFjacOzbiBkZSBkaXZlcnNhcyBmdWVudGVzIGRlIGRhdG9zIHB1ZWRlIGVucmlxdWVjZXIgbG9zIGVzdHVkaW9zIHkgcGVybWl0aXIgdW4gYW7DoWxpc2lzIG3DoXMgY29tcGxldG8geSBwcmVjaXNvIGRlbCBmZW7Ds21lbm8gZW4gZXN0dWRpby4gCiAgICAKICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlcgogICAgICAuY29sLWxnLTEwLm15LTMKICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIuYWxpZ24taXRlbXMtY2VudGVyLmJnMTMucC00LmJyYWQubWItNQogICAgICAgICAgLmNvbC1sZy03CiAgICAgICAgICAgIHAubWItMAogICAgICAgICAgICAgIGIgRWplbXBsbzogCiAgICAgICAgICAgICAgfCAgZXZhbHVhY2nDs24gZGUgZnVlbnRlcyBkZSBkYXRvcy4KICAgICAgICAgICAgcCBTdXB1bmdhbW9zIHF1ZSBlc3RhbW9zIHV0aWxpemFuZG8gbGFzIHNpZ3VpZW50ZXMgZnVlbnRlcyBkZSBkYXRvcyBwYXJhIHVuIGVzdHVkaW86CiAgICAgICAgICAgIG9sLmxpc3RhLW9sLS1jdWFkcm8uZmEtdWwucHgtMgogICAgICAgICAgICAgIGxpCiAgICAgICAgICAgICAgICAubGlzdGEtb2wtLWN1YWRyb19fdmluZXRhCiAgICAgICAgICAgICAgICAgIHNwYW4gMQogICAgICAgICAgICAgICAgc3BhbgogICAgICAgICAgICAgICAgICBiIERhdG9zIHByaW1hcmlvczoKICAgICAgICAgICAgICAgICAgfCAgZW5jdWVzdGFzIGFwbGljYWRhcyBhIHVuYSBtdWVzdHJhIGRlIGNsaWVudGVzLgogICAgICAgICAgICAgIGxpCiAgICAgICAgICAgICAgICAubGlzdGEtb2wtLWN1YWRyb19fdmluZXRhCiAgICAgICAgICAgICAgICAgIHNwYW4gMgogICAgICAgICAgICAgICAgc3BhbgogICAgICAgICAgICAgICAgICBiIERhdG9zIHNlY3VuZGFyaW9zOgogICAgICAgICAgICAgICAgICB8ICByZXBvcnRlcyBkZSBzYXRpc2ZhY2Npw7NuIGRlbCBjbGllbnRlIHByb3BvcmNpb25hZG9zIHBvciBsYSBlbXByZXNhIGRlIGxvcyDDumx0aW1vcyBjaW5jbyBhw7Fvcy4KICAgICAgICAgICAgcCBFdmFsdWFtb3MgbGEgY29uZmlhYmlsaWRhZCBkZSBsYXMgZnVlbnRlczoKICAgICAgICAgICAgdWwubGlzdGEtdWwtLWNvbG9yLmZhLXVsCiAgICAgICAgICAgICAgbGkubWItMwogICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2sudjEKICAgICAgICAgICAgICAgIHNwYW4KICAgICAgICAgICAgICAgICAgfCBMb3MgZGF0b3MgcHJpbWFyaW9zIHNvbiBjb25maWFibGVzIHBvcnF1ZSBjb250cm9sYW1vcyBlbCBwcm9jZXNvIGRlIHJlY29sZWNjacOzbi4KICAgICAgICAgICAgICBsaS5tYi0zCiAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay52MQogICAgICAgICAgICAgICAgc3BhbgogICAgICAgICAgICAgICAgICB8IExvcyBkYXRvcyBzZWN1bmRhcmlvcyBzb24gw7p0aWxlcywgcGVybyBwdWVkZW4gbm8gZXN0YXIgYWN0dWFsaXphZG9zIG8gdGVuZXIgc2VzZ29zIHJlbGFjaW9uYWRvcyBjb24gZWwgbcOpdG9kbyBkZSByZWNvbGVjY2nDs24gYW50ZXJpb3IuCiAgICAgICAgICAuY29sLWxnLTQKICAgICAgICAgICAgaW1nLmltZy1hLmltZy10KHNyYz0nQC9hc3NldHMvdGVtcGxhdGUvaW1hZ2VzL3Q3LzE0LnN2ZycgYWx0PScnKQogICAgCiAgICAudGl0dWxvLXNleHRvLmNvbG9yLWFjZW50by1jb250ZW5pZG8ub2Zmc2V0LTIoZGF0YS1hb3M9Inpvb20taW4iKQogICAgICBoNSBGaWd1cmEgMi4KICAgICAgc3BhbiAgVGlwb3MgZGUgRnVlbnRlcyBkZSBEYXRvcwogICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLmFsaWduLWl0ZW1zLWNlbnRlci5tYi01CiAgICAgIC5jb2wtbGctOC5tYi0zCiAgICAgICAgZmlndXJlCiAgICAgICAgICBpbWcoc3JjPSdAL2Fzc2V0cy90ZW1wbGF0ZS9pbWFnZXMvdDcvMTUuc3ZnJywgYWx0PSdMYSBGaWd1cmEgMiBzZSBkZW5vbWluYSDCq1RpcG9zIGRlIGZ1ZW50ZXMgZGUgZGF0b3PCuyB5IHByZXNlbnRhIGxvcyBkaXZlcnNvcyB0aXBvcyBkZSBmdWVudGUgc2Vnw7puIGVsIG9yaWdlbiwgbGEgbmF0dXJhbGV6YSwgZWwgZm9ybWF0bywgbGEgcHJvY2VkZW5jaWEgeSBsYSBhY2Nlc2liaWxpZGFkLicpCiAgICAgIC5jb2wtbGctOCAKICAgICAgICBmaWdjYXB0aW9uIEZ1ZW50ZTogT0lULCAyMDI0Lgo="},null]}